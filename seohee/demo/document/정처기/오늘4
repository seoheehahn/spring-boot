정렬 sort

- 삽입 정렬 ? 이미 순서화된 파일에 새로운 하나의 레코드를 순서에 맞게 삽입해 정렬함.
  초기상태 8 | 5| 6 | 2 | 4
  1회전    5 | 8| 6 | 2 | 4 (두번째 값을 첫값과 비교해 스왑함)

- 쉘 정렬 ? 삽입 정렬을 확장한 개념
  ㄴ 임의의 레코드 키와 [매개변수h] 값 만큼 떨어진곳의 키를 비교해
  순서화되어 있지 않으면서 서로 교환하는것을 반복하는 정렬방식임.
  ㄴ 입력파일이 부분적으로 정렬되어 있는 경우에 유리한 방식

- 선택 정렬 ? 레코드중에서 최소값을 찾아 첫레코드 위치에 놓고 [나머지 (n-1개)] 중에서
  다시 최소값을 찾아 두번째 레코드위치에 놓는 방식.

- 버블 정렬 ? [인접한 두개의 레코드] 키값을 비교해, 크기에따라 위치를 교환하는 방식

- 퀵 정렬 ? [하나의 파일을 부분적으로 나눠서] 정렬함.
  ㄴ 키를 기준으로 작은값은 왼쪽, 큰값을 오른쪽 서브파일로 분해시키는 방식
  ㄴ 정렬중에서 가장 빠름.
  ㄴ 프로그램에서 되부름을 이용하기 때문에 [스택 필요]
  ㄴ 분할과 정복을 통해 자료를 정렬함.

- 힙 정렬 ? [전이진 트리]를 이용한 정렬

- 2-Way 합병 정렬 ? [이미 정렬되어있는] 두개의 파일을 하나로 합병함.

- 기수 정렬 Radix Fort = Bucket Sort



검색

이분 검색 ? 전체 파일을 두개의 서브파일로 분리해 Key 레코드를 검색하는 방식
  ㄴ 반드시 순서화된 파일만 검색 가능
  ㄴ 찾고자하는 키를 파일의 중간 키값과 비교ㅕ하면서 검색
  ㄴ 비교횟수가 오를때마다 탐색효율좋고 탐색시간 적게 소요됨.

해싱 ? 해시테이블이라는 기억공간에 해시함수를 이용해 키에대한 홈주소를 계산함.
  ㄴ 해시 테이블 : 레코드를 한개이상 보관할수 있는 버킷들로 구성된 기억공간.
    ㄴ 버킷/슬롯/[콜리션:두개이상 같은주소 갖는 형상/시노님: 충돌로인해 같은 홈주소를 갖는 레코드 집합]/오버플로우 로 구성됨

  ㄴ 해싱 함수
   - 제산법/제곱법/[폴딩법]/기수변환법/대수적 코딩법/숫자분석법/무작위법
