자료구조 ? 프로그램에서 사용하기 위한 자료를 기억장치의 공간 내에 저장하는 방법, 관계, 처리방법을 연구분석함.
- 자료의 표현과 그것과 관련된 연산이다
- 일련의 자료들을 조직하고 구조화하는 것
- 필요한 모든 연산들도 처리할 수 있음
- 자료구조에 따라 프로그램 실행시간이 달라짐

분류
- 선형 구조
 - 배열 ? 동일한 자료형의 데이터들이 같은 크리고 나열되어 순서를 갖고있는 집합
   ㄴ 반복적인 데이터 처리작업에 적합함
   ㄴ 동일한 이름 변수 사용으로 처리 간편
   ㄴ 사용한 첨자의 개수에 따라 "n차원 배열" 이라고도 부름
   
 - 스택 ? 리스트의 한 끝으로만 자료의 삽입 삭제가 이뤄짐. (나서스 스택ㅋ)
   ㄴ 후입선출 LIFO*
   ㄴ 함수호출의 순서 제어, 인터럽트 처리, 수식 계산 등등등등
   ㄴ 스택의 기억공간이 꽉채어져있는데 데이터가 들어오면 [오버플로우] 발생.
   ㄴ 더이상 삭제할 데이터가 없는 상태에서 삭제하면 [언더플로우] 방생
   
 - 큐 ? 리스트 한쪽에선 삽입이 이뤄지고, 다른곳에선 삭제가 이뤄짐
   ㄴ 선입선출 FIFO*
   ㄴ 프런트 포인터 (F, Front) 가장 먼저 삽입된 자료의 기억공간임. (삭제작업할때 사용)
   ㄴ 리어 포인터 (R, Rear) 가장 마지막 ㅇㅇ. (삽입 작업 할때 사용)
 
 - 데크
 
 - 선형리스트 ? 일정한 순서에 의해 나열된 자료구조
  - 연속 선형리스트 ? 배열과 같이 연속되는 기억장소에 저장됨
    ㄴ 기억장소 이용 효율은 밀도가 1로써, 가장 좋다
    ㄴ 중간에 데이터를 넣기 위해선 연속된 빈 공간이 있어야하고 자료 이동이 됨
  
  - 연결 선형리스트 ? 연속적으로 배열시키지 않고 임의의 기억 공간에 기억시킴
    
  
- 비선형 구조
 - 트리 ? 정점 (Node)과 선분 (Branch)을 이용하여 사이클을 이루지 않도록 구성한 그래프의 특수한 형태
   ㄴ 하나의 기억 공간 = "노드" 라고 함
   ㄴ 노드와 노드를 연결하는 선을 "링크" 라고함
   ㄴ 노드,근노드,디그리,단말노드,자식노드,부모노드,형제노드,서희노드

   -트리의 운행법 ? 트리를 구성하는 각 노드들을 찾아가는 방법을 "운행법" 이라함.
        A
      /   \
    B      C
    ㄴ Preorder 운행 = A->B->C
    ㄴ Inorder 운행 = B->A->C
    ㄴ Postorder 운행 = B->C->A
   
 - 그래프 ? 그래프 G는 정점 V와 간선 E의 두 집합으로 이루어짐
   ㄴ 네트워크, 교통망, 이항관계, 등 응용됨
   
 
